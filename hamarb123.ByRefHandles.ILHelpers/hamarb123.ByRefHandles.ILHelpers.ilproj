<Project Sdk="hamarb123.ProjectSdk/1.0.47">
	<Import Project="..\hamarb123.ByRefHandles.ProjectImpl\Sdk\SharedProjectProperties.props" />
	<Import Project="..\hamarb123.ByRefHandles.ProjectImpl\Sdk\SharedILProjectProperties.props" />

	<PropertyGroup>
		<OverrideDefaultSdk>Microsoft.NET.Sdk.IL</OverrideDefaultSdk>
		<OverrideDefaultSdkVersion>9.0.5</OverrideDefaultSdkVersion>
		<DebugOptimization>IMPL</DebugOptimization>
		<DebugOptimization Condition=" '$(Configuration)' == 'Release' ">OPT</DebugOptimization>
		<IlasmFlags>$(IlasmFlags) -DEBUG=$(DebugOptimization) -FOLD</IlasmFlags>
		<IlasmFlags Condition=" '$(Configuration)' == 'Release' ">$(IlasmFlags) -OPT</IlasmFlags>
		<EnableDefaultCompileItems>false</EnableDefaultCompileItems>
		<CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateVersionFile</CoreCompileDependsOn>
	</PropertyGroup>

	<ItemGroup>
		<None Include="include\**\*.h" />
		<None Remove="include\**\._*.h" />
		<CompileCustom Include="*.il" />
		<CompileCustom Remove="._*.il" />
		<None Include="@(CompileCustom)" />
		<CompileCustom Remove="*.generated.il" />
		<Compile Include="@(CompileCustom)" />
	</ItemGroup>

	<PropertyGroup>
		<CoreAssembly Condition=" '$(TargetFramework)' != '' AND '$([MSBuild]::GetTargetFrameworkIdentifier($(TargetFramework)))' == '.NETFramework' ">mscorlib</CoreAssembly>
		<CoreAssembly Condition=" '$(TargetFramework)' != '' AND '$([MSBuild]::GetTargetFrameworkIdentifier($(TargetFramework)))' == '.NETStandard' ">netstandard</CoreAssembly>
		<CoreAssembly Condition=" '$(TargetFramework)' != '' AND '$([MSBuild]::GetTargetFrameworkIdentifier($(TargetFramework)))' == '.NETCoreApp' ">System.Runtime</CoreAssembly>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Condition=" '$(TargetFramework)' == 'net462' OR '$(TargetFramework)' == 'netstandard2.0' " Include="System.Memory" Version="4.6.3" />
		<Reference Condition=" '$(TargetFramework)' == 'net462' " Include="$(CoreAssembly)" />
	</ItemGroup>

	<Target Name="GenerateVersionFile" DependsOnTargets="GetAssemblyVersion;ResolveReferences" Outputs="$(VersionFilePath)">
		<PropertyGroup>
			<IncludePath>$([MSBuild]::NormalizeDirectory('$(IntermediateOutputPath)', 'version'))</IncludePath>
			<IncludePathTrimmed>$(IncludePath.TrimEnd('\').TrimEnd('/'))</IncludePathTrimmed>
			<IlasmFlags>$(IlasmFlags) -INCLUDE="$(IncludePathTrimmed)"</IlasmFlags>
			<VersionFilePath Condition=" '$(VersionFilePath)' == '' ">$([MSBuild]::NormalizePath('$(IncludePath)', 'version.h'))</VersionFilePath>
			<_AssemblyVersion>$(AssemblyVersion.Replace('.', ':'))</_AssemblyVersion>
			<_coreAssemblyName Condition=" '%(ReferencePath.FileName)' == '$(CoreAssembly)' ">%(ReferencePath.FusionName)</_coreAssemblyName>
			<_assemblyNamePattern><![CDATA[[^,]+, Version=(?<v1>[0-9]+)\.(?<v2>[0-9]+)\.(?<v3>[0-9]+)\.(?<v4>[0-9]+), .*PublicKeyToken=(?<p1>[0-9a-f]{2})(?<p2>[0-9a-f]{2})(?<p3>[0-9a-f]{2})(?<p4>[0-9a-f]{2})(?<p5>[0-9a-f]{2})(?<p6>[0-9a-f]{2})(?<p7>[0-9a-f]{2})(?<p8>[0-9a-f]{2})]]></_assemblyNamePattern>
			<_coreAssemblyVersion>$([System.Text.RegularExpressions.Regex]::Replace($(_coreAssemblyName), $(_assemblyNamePattern), '${v1}:${v2}:${v3}:${v4}'))</_coreAssemblyVersion>
			<_coreAssemblyPublicKeyToken>$([System.Text.RegularExpressions.Regex]::Replace($(_coreAssemblyName), $(_assemblyNamePattern), '${p1} ${p2} ${p3} ${p4} ${p5} ${p6} ${p7} ${p8}').ToUpperInvariant())</_coreAssemblyPublicKeyToken>
			<_VersionFileContents>
				<![CDATA[
#define CORE_ASSEMBLY "$(CoreAssembly)"
#define CORE_ASSEMBLY_VERSION "$(_CoreAssemblyVersion)"
#define CORE_ASSEMBLY_PUBLIC_KEY_TOKEN "( $(_coreAssemblyPublicKeyToken) )"

// Metadata version: v4.0.30319
.assembly extern CORE_ASSEMBLY
{
	.publickeytoken = CORE_ASSEMBLY_PUBLIC_KEY_TOKEN
	.ver CORE_ASSEMBLY_VERSION
}

$([System.IO.File]::ReadAllText('include\$(TargetFramework)\defines.h'))

#define ASSEMBLY_FILE_VERSION "{ string('$(FileVersion)') }"
#define ASSEMBLY_INFORMATIONAL_VERSION "{ string('$(InformationalVersion)') }"
#define ASSEMBLY_TITLE "{ string('$(AssemblyTitle)') }"
#define ASSEMBLY_DESCRIPTION "{ string('$(Description)') }"
#define ASSEMBLY_COPYRIGHT "{ string('$(Copyright)') }"
#define ASSEMBLY_COMPANY "{ string('$(Company)') }"
#define ASSEMBLY_PRODUCT "{ string('$(Product)') }"
#define ASSEMBLY_VERSION "$(_AssemblyVersion)"

 ]]>
			</_VersionFileContents>
		</PropertyGroup>

		<WriteLinesToFile File="$(VersionFilePath)" Lines="$(_VersionFileContents)" Overwrite="true" WriteOnlyWhenDifferent="true" />

		<ItemGroup>
			<FileWrites Include="$(VersionFilePath)" />
		</ItemGroup>
	</Target>

	<ItemGroup>
		<ProjectReference Include="..\hamarb123.ByRefHandles.ILHelpers.ResourcesDefinition\hamarb123.ByRefHandles.ILHelpers.ResourcesDefinition.csproj" ReferenceOutputAssembly="false" OutputItemType="ResolvedMatchingContract" />
	</ItemGroup>

	<Target Name="SetILResourceReference" BeforeTargets="DisassembleIlasmResourceFile">
		<ItemGroup>
			<ILResourceReference Include="@(ResolvedMatchingContract)" />
		</ItemGroup>
	</Target>
</Project>
